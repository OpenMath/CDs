<CD xmlns="http://www.openmath.org/OpenMathCD">

<CDComment>

     This document is distributed in the hope that it will be useful, 
     but WITHOUT ANY WARRANTY; without even the implied warranty of 
     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

     The copyright holder grants you permission to redistribute this 
     document freely as a verbatim copy. Furthermore, the copyright
     holder permits you to develop any derived work from this document
     provided that the following conditions are met.
       a) The derived work acknowledges the fact that it is derived from
          this document, and maintains a prominent reference in the 
          work to the original source.
       b) The fact that the derived work is not the original OpenMath 
          document is stated prominently in the derived work.  Moreover if
          both this document and the derived work are Content Dictionaries
          then the derived work must include a different CDName element,
          chosen so that it cannot be confused with any works adopted by
          the OpenMath Society.  In particular, if there is a Content 
          Dictionary Group whose name is, for example, `math' containing
          Content Dictionaries named `math1', `math2' etc., then you should 
          not name a derived Content Dictionary `mathN' where N is an integer.
          However you are free to name it `private_mathN' or some such.  This
          is because the names `mathN' may be used by the OpenMath Society
          for future extensions.
       c) The derived work is distributed under terms that allow the
          compilation of derived works, but keep paragraphs a) and b)
          intact.  The simplest way to do this is to distribute the derived
          work under the OpenMath license, but this is not a requirement.
     If you have questions about this license please contact the OpenMath
     society at http://www.openmath.org.
</CDComment>

   <CDName> polyd </CDName>
<CDBase>http://www.openmath.org/cd</CDBase> 
   <CDURL>http://www.openmath.org/cd/polyd.ocd</CDURL>
   <CDReviewDate>2017-12-31</CDReviewDate> 
   <CDDate>2004-03-30</CDDate> 
   <CDStatus> experimental </CDStatus>
   <CDVersion>4</CDVersion>
   <CDRevision>1</CDRevision>
<CDComment>
  Author: OpenMath Consortium
  SourceURL: https://github.com/OpenMath/CDs
</CDComment>
   <Description>
     This CD contains operators to deal with polynomials and more precisely 
     Distributed Multivariate Polynomials.
   </Description>

<CDComment>
Original OpenMath v1.1 Poly 1997
Update to Current Format 1999-07-07 DPC
Move the names of rings to setname.ocd 1999-11-09 JHD
Delete those items moved to the new poly.ocd 1999-11-14 JHD
Update following Abbott/Davenport/Strotmann at Dagstuhl 2001-10-12 JHD
Added example to weighted_degree 2002-09-17 JHD
</CDComment>

<CDComment>

 This is our attempt at defining a first Content Dictionary to deal with
 polynomials. There are many possible choices for a polynomial CD, and
 several questions to answer. 

 The reader may feel that this content dictionary is quite different in
 spirit from the "Basic" one. Although it basically defines a set of concepts
 related to polynomials (such as degree, factorization, resultant...), there
 are two new points here:
 - a certain emphasis on representation issues (including structural
   constraints on some OM objects),
 - an attempt to specify some "computational behaviour" of an OM application
   that handles (part of) this CD.
 
 As some people may disagree with some of our choices, we will try to justify
 them in this rather long foreword. 
 
 1. Representation issues

 One of the interest of OM is certainly to enable the use of specialized
 servers. It is important to promote the writing of OM-compliant servers by
 placing as few constraints as possible on the programmers of these
 packages. This CD has been designed with the idea that it could be simple to
 use for a server dealing only with polynomial computations. Hence we have
 used a particular representation for polynomials (distributed with dense
 monomials). This representation is rather abstract in the sense that it does
 not introduce names for variables. It explicitly contains the polynomial
 ring a polynomial belongs to as the set of the coefficients and the number
 of variables. It seems (from our experience) that this information is
 necessary for most specialized servers. 

 Expressing constraints on the structure of OM objects made from the symbols
 in this CD is not always easy. One of the main reason is that a symbol such
 as "gcd" is meant to denote the GCD of a set of polynomials, no matter how
 the polynomials are represented. Such a function should thus accept both
 "symbolic" arguments (a list of symbolic object meant to be polynomials) and
 the polynomials in the specific representation defined in this CD. Of
 course, another solution will be to have one "gcd" for one (or several)
 particular representation and another "gcd" to express the general notion
 of polynomial "gcd". We though that the solution we chose was more in the
 spirit of "Basic" and the discussions of the last OpenMath meeting.

 A question which is not entirely answered is whether or not it is
 interesting to have "symbolic" objects inside some constructors (such as a
 power which is not an OM integer in "Monom" or a symbolic "PolyRingD" (a
 variable) as an argument of "DMP"). We explicitly forbid that in the first
 version of this CD.

 Note that we did not try to express the constraints with signatures in this
 version because we did not find a really satisfactory solution.

 2. Specifying some "computational behaviour"

 Of course it would be of no use to exactly specify the behaviour of any OM
 application that receives an OM object. There are (at least) two reasons for
 that:
 - an OM object is intended to represent a mathematical object and thus the
   same OM object could be sent to a typesetter as well as to a symbolic
   computation system,
 - even when dealing with programs that compute, exact specifications could be
   impossible or too much constraining for a given system.

 On the other hand, we believe that one of the goal of OM is certainly that a
 program needing to factorize an integer could transparently use Maple, Axiom
 or Pari to do the job. This is of course possible only if all severs that
 "implement" (in the sense of really performing) the mathematical notion of
 integer factorization answer in a similar way. In other words, we should not
 hesitate to specify what a particulary useful class of OM applications (the
 "computing" ones) should return (the form of the result) everytime
 compliance to this specification is simple enough because it is obviously
 very useful. We have tried to express this idea in this CD through some
 comments and the use of symbols such as "factored" or "groebnered" that
 describe the required results of some functions. 
 
 The general "compliance" rule can be stated as:
   an OM application that understands this CD and implements some of the 
   polynomials operation described is required to implement them using the
   constructors defined in this CD, as indicated in the comments associated
   with the operations.

 This means that if the OM version of a computer algebra system claims to
 implement polynomial factorization, another application can send him an
 OM object as described in the "factor" comment (the symbol "factor" applied
 to one argument, a DMP) and the result will be return as defined : a 
 "factored" symbol whose arguments are described in the corresponding entry
 of the poly CD.
</CDComment>


<CDComment>
     Definition of data-structure constructors
</CDComment>

<CDComment>
     The polynomial x^2*y^6 + 3*y^5 can be encoded as
     DMP(poly_ring_d(Z, 2), SDMP(term(1, 2, 6), term(3, 0, 5)))
     if the variables are anonymous, or if they are named, as
     DMP(poly_ring_d_named(Z, x,y), SDMP(term(1, 2, 6), term(3, 0, 5)))

     The polynomial 2*y^3*z^5 + x + 1 can be
     DMP(poly_ring_d(Q, 3), 
         SDMP(term(2, 0, 3, 5), term(1, 1, 0, 0), term(1, 0, 0, 0)))

     Note that these are not real encodings but a "term-like" encoding (whose
     understanding should be trivial) meant for the human readers of this
     dictionary. Of course, actual encodings can be more compact...
</CDComment>

    <CDDefinition>
       <Name> DMP </Name>
<Role>application</Role>
       <Description>
         The constructor of DMPs. The first argument is the polynomial
         ring containing the polynomial and the second is a "SDMP". 
         Should be of the form DMP(PolyRingD(...), SDMP(...))
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> DMPL </Name>
<Role>application</Role>
       <Description>
         The constructor for lists of multivariate polynomial members of the 
         same polynomial ring. The first argument is a polynomial ring
         and the rest are "SDMP"s. DMPL can be attributed with the "ordering" 
         symbol to indicate a particular ordering for monomials of all its
         polynomials. 
         Should be of the form DMPL(PolyRingD(...), SDMP(...)+)
       </Description>
    </CDDefinition>


    <CDDefinition>
       <Name> SDMP </Name>
<Role>application</Role>
       <Description>
         The constructor for multivariate polynomials without
         any indication of variables or domain for the coefficients.
	 Its arguments are just "term"s. No terms should differ only by
         the coefficient (i.e it is not permitted to have both "2*x*y" and
         "x*y" as terms in a SDMP). SDMP can be attributed with 
         the "ordering" symbol to indicate a particular ordering of its
         terms. This attribute shall not be set if the SDMP is part of 
         DMPL that has this attribute set. If the SDMP is ordered, explicitly
         or implicitly via an outer ordering, the terms must be in decreasing
         order with respect to this order. The zero polynomial is represented
         by an SDMP with no terms.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> term </Name>
<Role>application</Role>
       <Description>
         The constructor of terms. Valid applications are of the form
         Term(coeff, exp1, exp2, ... expn)
	 which represents the term 
         coeff * var1^exp1*...varn^expn
         where n is the number of variables, expi are non-negative integers.
         coeff should be non-zero.
       </Description>
    </CDDefinition>

<CDComment>
    Polynomial rings constructors
</CDComment>


    <CDDefinition>
       <Name> poly_ring_d </Name>
<Role>application</Role>
       <Description> 
         The constructor of polynomial ring. The first argument is a ring
         (the ring of the coefficients), the second is the number 
         of variables as an integer.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> poly_ring_d_named </Name>
<Role>application</Role>
       <Description> 
         The constructor of polynomial ring. The first argument is a ring
         (the ring of the coefficients), the remaining arguments are the 
         names of the variables. The first variable given is the most
         important from the point of view of lexicographic ordering, then
         the second, and so on.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> anonymous </Name>
<Role>constant</Role>
       <Description> 
         Indicates a variable that we do not want to name
       </Description>
    </CDDefinition>

<CDComment>
     Definitions related to orderings
</CDComment>


    <CDDefinition>
       <Name> ordering </Name>
<Role>semantic-attribution</Role>
       <Description> 
          Used as an attribute to indicate an ordering of the terms in a
          polynomial or list of polynomials. The value of this attribute
          should be one of the constructors specifying ordering. 
       </Description>
    </CDDefinition>

<CDComment>
          The following orders on terms have their standards definitions, 
         see, for example, "Ideals, Varieties and Algorithms", D. Cox, 
         J.B. Little and D. O'Shea, Springer Verlag.
</CDComment>

    <CDDefinition>
       <Name> lexicographic </Name>
<Role>constant</Role>
       <Description> 
          The lexicographic ordering of terms.
          Note that, if a poly_ring_d_named is used, lexigographic refers
          to the order of the variables in the poly_ring_d_named, not to 
          their order as strings.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> reverse_lexicographic </Name>
<Role>constant</Role>
       <Description> 
          The reverse lexicographic ordering of terms.
          Note that, if a poly_ring_d_named is used, lexigographic refers
          to the order of the variables in the poly_ring_d_named, not to 
          their order as strings.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> graded_lexicographic </Name>
<Role>constant</Role>
       <Description> 
          Total degree order, graded with the lexicographic ordering.
          Note that, if a poly_ring_d_named is used, lexigographic refers
          to the order of the variables in the poly_ring_d_named, not to 
          their order as strings.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> graded_reverse_lexicographic </Name>
<Role>constant</Role>
       <Description> 
          Total degree order, graded with the reverse lexicographic ordering.
          Note that, if a poly_ring_d_named is used, lexigographic refers
          to the order of the variables in the poly_ring_d_named, not to 
          their order as strings.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> elimination </Name>
<Role>constant</Role>
       <Description> 
          This is an ordering, which is partially in terms of one
          ordering, and partially in terms of another.
          First argument is a number of variables.
          Second is ordering to apply on the first so many variables.
          Third is an ordering on the rest, to be used to break ties.
       </Description>
       <Example>
         <OMOBJ xmlns="http://www.openmath.org/OpenMath" version="2.0" cdbase="http://www.openmath.org/cd">
           <OMA>
             <OMS name="elimination" cd="polyd"/>
             <OMI> 1 </OMI>
             <OMS name="lexicographic" cd="polyd"/>
             <OMS name="graded_reverse_lexicographic" cd="polyd"/>
           </OMA>
         </OMOBJ>
       </Example>
    </CDDefinition>

    <CDDefinition>
       <Name> matrix_ordering </Name>
<Role>application</Role>
       <Description> 
          The argument is a matrix with as many columns as indeterminates
          (= rank). Each row in turm is multiplied by the column vector of
          exponents to produce a weighting for comparison purposes.
       </Description> 
    </CDDefinition>

    <CDDefinition>
       <Name> weighted </Name>
<Role>application</Role>
       <Description> 
          The first argument is a list of integers to act as variable weights,
          and the second is an ordering. The result is an ordering.
       </Description> 
    </CDDefinition>

<CDComment>
  We need a few more orderings... 
</CDComment>

<CDComment>
     Definition of some other constructors
</CDComment>

    <CDDefinition>
      <Name> weighted_degree </Name>
<Role>application</Role>
      <Description> 
        The total degree of its argument, taking into account any weights 
        declared. The value returned is an integer: non-negative if the 
        weights are. We note that the degree of 0 is undefined.
      </Description>
      <Example>
        <OMOBJ xmlns="http://www.openmath.org/OpenMath" version="2.0" cdbase="http://www.openmath.org/cd">
          <OMA>
            <OMS name="eq" cd="relation1"/>
            <OMA>
              <OMS name="weighted_degree" cd="polyd"/>
              <OMA>
                <OMS name="DMP" cd="polyd"/>
                <OMA>
                  <OMS name="poly_ring_d" cd="polyd"/>
                  <OMS name="Q" cd="setname1"/>
                  <OMI> 3 </OMI>
                </OMA>
                <OMATTR>
                  <OMATP>
                    <OMS name="ordering" cd="polyd"/>
                    <OMA>
                      <OMS name="weighted" cd="polyd"/>
                      <OMA>
                        <OMS name="list" cd="list1"/>
                        <OMI> 1 </OMI>
                        <OMI> 2 </OMI>
                        <OMI> 3 </OMI>
                      </OMA>
                      <OMS name="graded_lexicographic" cd="polyd"/>
                    </OMA>
                  </OMATP>
                  <OMA>
                    <OMS name="SDMP" cd="polyd"/>
                    <OMA>
                      <OMS name="term" cd="polyd"/>
                      <OMI> 1 </OMI>
                      <OMI> 0 </OMI>
                      <OMI> 0 </OMI>
                      <OMI> 1 </OMI>
                    </OMA>
                    <OMA>
                      <OMS name="term" cd="polyd"/>
                      <OMI> 2 </OMI>
                      <OMI> 2 </OMI>
                      <OMI> 0 </OMI>
                      <OMI> 0 </OMI>
                    </OMA>
                    <OMA>
                      <OMS name="term" cd="polyd"/>
                      <OMI> 3 </OMI>
                      <OMI> 0 </OMI>
                      <OMI> 1 </OMI>
                      <OMI> 0 </OMI>
                    </OMA>
                    <OMA>
                      <OMS name="term" cd="polyd"/>
                      <OMI> 4 </OMI>
                      <OMI> 1 </OMI>
                      <OMI> 0 </OMI>
                      <OMI> 0 </OMI>
                    </OMA>
                  </OMA>
                </OMATTR>
              </OMA>
            </OMA>
            <OMI> 3 </OMI>
          </OMA>
        </OMOBJ>
      </Example>
    </CDDefinition>

   <CDDefinition>
       <Name> groebnered </Name>
<Role>application</Role>
       <Description> 
          The constructor for a Groebner basis (reduced, minimal). The first
          argument is an ordering, the second is the Groebner Basis itself
          (with respect to the ordering) that should be represented as a DMPL.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> completely_reduced </Name>
<Role>semantic-attribution</Role>
       <Description> 
          This attribute, attached to a groebnered object, says 'true' if
          the base is fully reduced, i.e. no monomial is divisible by the
          leading monomial of any other polynomial.
       </Description>
    </CDDefinition>

<CDComment>
     Definition of operations
</CDComment>


    <CDDefinition>
       <Name> plus </Name>
<Role>application</Role>
       <Description>
         The sum. The argument is a DMPL. The sum lies within the same
         "PolyRingD" i.e. a program implementing this operation
         should return a DMP with the same "poly_ring_d" 
         (or "poly_ring_d_named").
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> times </Name>
<Role>application</Role>
       <Description>
         The product. The argument is a DMPL. The product lies within the same
         "PolyRingD" i.e. a program implementing this operation
         should return a DMP with the same "poly_ring_d"
         (or "poly_ring_d_named").
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> power </Name>
<Role>application</Role>
       <Description> The power. First argument is a DMP, second
          argument is the integer power. The power lies within the same
          "PolyRingD"  i.e. a program implementing this operation 
          should return a DMP with the same "poly_ring_d"
          (or "poly_ring_d_named").
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> groebner </Name>
<Role>application</Role>
       <Description> 
         The groebner basis (lt-reduced, minimal) of a set of polynomials, 
         with respect to a given ordering. First argument is an ordering, the
         second is a list of polynomials. A program that can compute
         the basis is required to return a "groebnered" object.
       </Description>
    </CDDefinition>

    <CDDefinition>
       <Name> reduce </Name>
<Role>application</Role>
       <Description>
         The reduction of a polynomial with respect to a Groebner basis. 
         First argument is a DMP, the second argument is a "groebnered" 
         object.
         i.e. a program implementing this operation should return a DMP which
         represents the polynomial reduced with respect to the Groebner basis.
       </Description>
    </CDDefinition>

</CD>